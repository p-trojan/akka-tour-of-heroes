akka {
  loggers = ["akka.event.Logging$DefaultLogger"]
  loglevel = "DEBUG"
  stdout-loglevel = "DEBUG"

  http {
    server {
      server-header = akka-http/${akka.http.version}
      idle-timeout = 60 s
      request-timeout = 20 s
      parsing {
            # no overrides by default, see `akka.http.parsing` for default values

            # Server-specific parsing settings:

            # Default maximum content length which should not be exceeded by incoming request entities.
            # Can be changed at runtime (to a higher or lower value) via the `HttpEntity::withSizeLimit` method.
            # Note that it is not necessarily a problem to set this to a high value as all stream operations
            # are always properly backpressured.
            # Nevertheless you might want to apply some limit in order to prevent a single client from consuming
            # an excessive amount of server resources.
            #
            # Set to `infinite` to completely disable entity length checks. (Even then you can still apply one
            # programmatically via `withSizeLimit`.)
            max-content-length = 8m

            # When a request is so malformed we cannot create a RequestContext out of it,
            # the regular exception handling does not apply, and a default error handling
            # is applied that only has access to the parse error and not the actual request.
            # To customize this error response, set error-handler to the FQCN of an
            # implementation of akka.http.ParsingErrorHandler
            error-handler = "akka.http.DefaultParsingErrorHandler$"
          }
    }
    routing {
      # Enables/disables the returning of more detailed error messages to the
      # client in the error response
      # Should be disabled for browser-facing APIs due to the risk of XSS attacks
      # and (probably) enabled for internal or non-browser APIs
      # (Note that akka-http will always produce log messages containing the full error details)
      verbose-error-messages = off

      # Enables/disables ETag and `If-Modified-Since` support for FileAndResourceDirectives
      file-get-conditional = on

      # Enables/disables the rendering of the "rendered by" footer in directory listings
      render-vanity-footer = yes

      # The maximum size between two requested ranges. Ranges with less space in between will be coalesced.
      #
      # When multiple ranges are requested, a server may coalesce any of the ranges that overlap or that are separated
      # by a gap that is smaller than the overhead of sending multiple parts, regardless of the order in which the
      # corresponding byte-range-spec appeared in the received Range header field. Since the typical overhead between
      # parts of a multipart/byteranges payload is around 80 bytes, depending on the selected representation's
      # media type and the chosen boundary parameter length, it can be less efficient to transfer many small
      # disjoint parts than it is to transfer the entire selected representation.
      range-coalescing-threshold = 80

      # The maximum number of allowed ranges per request.
      # Requests with more ranges will be rejected due to DOS suspicion.
      range-count-limit = 16

      # The maximum number of bytes per ByteString a decoding directive will produce
      # for an entity data stream.
      decode-max-bytes-per-chunk = 1m

      # Maximum content length after applying a decoding directive. When the directive
      # decompresses, for example, an entity compressed with gzip, the resulting stream can be much
      # larger than the max-content-length. Like with max-content-length, this is not necessarilly a
      # problem when consuming the entity in a streaming fashion, but does risk high memory use
      # when the entity is made strict or marshalled into an in-memory object.
      # This limit (like max-content-length) can be overridden on a case-by-case basis using the
      # withSizeLimit directive.
      decode-max-size = 8m
    }

    # server-sent events
    sse {
      # The maximum size for parsing server-sent events.
      max-event-size = 8192

      # The maximum size for parsing lines of a server-sent event.
      max-line-size = 4096

      # Empty events are used by the akka-http SSE infrastructure for heartbeats. Received heartbeats are ignored by default
      # and not delivered in the user stream.
      #
      # This setting can be enabled to pass those empty events to the application for explicit handling.
      emit-empty-events = off
    }
  }
}

my-app {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "DEBUG"
  stdout-loglevel = "DEBUG"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  routes {
    # If ask takes more time than this to complete the request is failed
    ask-timeout = 5s
  }
}

akka-http-cors {
  allowed-origins = ["http://127.0.0.1:4200", "http://localhost:4200"]
  allowed-methods = ["GET", "POST", "PUT", "DELETE", "HEAD", "OPTIONS"]
  exposed-headers = ["X-Correlation-ID"]
}

